# 封装、继承、堕胎
# 1、封装重点：把属性和方法封装在一起，并赋予权限
    # 作用：保证内部的高内聚和与外部的低耦合性
    # 外部不能直接访问，内部可以直接访问
    # 在属性或方法前面加2个下划线就表示该成员是私有的
# 2、继承：子类继承父类，那么子类有父类的属性和方法
    # 类和类之间才能继承
    # 作用：简化代码，代码复用
    # 父类（基类，超类），子类（派生类）
    # 子类的小括号中，写了那个类就继承了谁
    # 子类拥有父类的所有属性和方法(私有除外)
    # 继承有单继承和多继承
    # object是所有的父类，如果一个类没有默认显示指明他的父类，则默认就为object
# 3、多态：同一操作作用于不同对象，可以有不同的解释，产生不同的执行结果。

class Maker():
    def __init__(self,name,age):
        self.__name = name # 私有成员
        self.__age=age
    
    def __pri(self):
        print('我是私有函数')
    
    def test(self,age): # 对外的接口
        if age > 18:
            self.__pri()


m = Maker('123',18)
print(m.name)# 报错，不能在内外访问私有属性
m.__pri()# 报错，不能访问私有成员
m.test()